var exports;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "roundToNPlaces": () => (/* binding */ roundToNPlaces)
/* harmony export */ });
let canvas = document.getElementById("arrowBenchCanvas");
canvas.width = 1920;
canvas.height = 1080;
let ctx = canvas.getContext("2d");
let arrowCounter = document.getElementById("arrowCounter");
let fpsCounter = document.getElementById("fpsCounter");
let arrowsPerMsCounter = document.getElementById("arrowsPerMsCounter");
let arrowSize = 20;
let halfArrowSize = arrowSize / 2;
let noteskin4thPath = "../assets/noteskin_4th.png";
let noteskin8thPath = "../assets/noteskin_8th.png";
let noteskin12thPath = "../assets/noteskin_12th.png";
let noteskin16thPath = "../assets/noteskin_16th.png";
let noteskin20thPath = "../assets/noteskin_20th.png";
let noteskin24thPath = "../assets/noteskin_24th.png";
let noteskin32ndPath = "../assets/noteskin_32nd.png";
let noteskin48thPath = "../assets/noteskin_48th.png";
let noteskin64thPath = "../assets/noteskin_64th.png";
let noteskin96thPath = "../assets/noteskin_96th.png";
let noteskin128thPath = "../assets/noteskin_128th.png";
let noteskin192ndPath = "../assets/noteskin_192nd.png";
let preloadRegistry = new Map();
let arrowColors = [
    loadImage(noteskin4thPath),
    loadImage(noteskin8thPath),
    loadImage(noteskin12thPath),
    loadImage(noteskin16thPath),
    loadImage(noteskin20thPath),
    loadImage(noteskin24thPath),
    loadImage(noteskin32ndPath),
    loadImage(noteskin48thPath),
    loadImage(noteskin64thPath),
    loadImage(noteskin96thPath),
    loadImage(noteskin128thPath),
    loadImage(noteskin192ndPath),
];
let arrowCacheResized;
let arrowCacheNotResized;
function createResizedCache() {
    arrowCacheResized = [];
    for (let rotationIndex = 0; rotationIndex < 4; rotationIndex++) {
        let colorCache = [];
        for (let colorIndex = 0; colorIndex < arrowColors.length; colorIndex++) {
            let canvas = document.createElement("canvas");
            canvas.width = arrowSize;
            canvas.height = arrowSize;
            let ctx = canvas.getContext("2d");
            drawArrowToCacheResized(ctx, rotationIndex, colorIndex);
            colorCache.push(canvas);
        }
        arrowCacheResized.push(colorCache);
    }
}
function drawArrowToCacheResized(ctx, rotationIndex, colorIndex) {
    ctx.save();
    ctx.translate(halfArrowSize, halfArrowSize);
    ctx.rotate(rotationIndex * Math.PI / 2);
    ctx.drawImage(arrowColors[colorIndex], -halfArrowSize, -halfArrowSize, arrowSize, arrowSize);
    ctx.restore();
}
function createNotResizedCache() {
    arrowCacheNotResized = [];
    let arrowImageSize = arrowColors[0].height;
    for (let rotationIndex = 0; rotationIndex < 4; rotationIndex++) {
        let colorCache = [];
        for (let colorIndex = 0; colorIndex < arrowColors.length; colorIndex++) {
            let canvas = document.createElement("canvas");
            canvas.width = arrowImageSize;
            canvas.height = arrowImageSize;
            let ctx = canvas.getContext("2d");
            drawArrowToCacheNotResized(ctx, rotationIndex, colorIndex);
            colorCache.push(canvas);
        }
        arrowCacheNotResized.push(colorCache);
    }
}
function drawArrowToCacheNotResized(ctx, rotationIndex, colorIndex) {
    let arrowSize = arrowColors[colorIndex].height;
    let halfArrowSize = arrowSize / 2;
    ctx.save();
    ctx.translate(halfArrowSize, halfArrowSize);
    ctx.rotate(rotationIndex * Math.PI / 2);
    ctx.drawImage(arrowColors[colorIndex], -halfArrowSize, -halfArrowSize, arrowSize, arrowSize);
    ctx.restore();
}
// See this if I encounter weird loading problems later:
// https://stackoverflow.com/questions/12354865/image-onload-event-and-browser-cache
function loadImage(imageSource) {
    if (preloadRegistry.has(imageSource)) {
        throw new Error("You attempted to load the same image twice during preloading.");
    }
    preloadRegistry.set(imageSource, false);
    // The order these 3 things are done in is VERY important!
    let image = new Image();
    image.onload = () => {
        preloadRegistry.set(imageSource, true);
    };
    image.src = imageSource;
    return image;
}
let preloadIntervalId = setInterval(() => {
    if (preloadDone()) {
        clearInterval(preloadIntervalId);
        createResizedCache();
        createNotResizedCache();
        window.requestAnimationFrame(draw);
    }
}, 100);
function preloadDone() {
    for (let [key, loaded] of preloadRegistry) {
        if (!loaded) {
            return false;
        }
    }
    ;
    return true;
}
let mouseDown = false;
let mouseX = 0;
let mouseY = 0;
document.addEventListener("mousedown", (e) => { mouseDown = true; });
document.addEventListener("mouseup", (e) => { mouseDown = false; });
document.addEventListener("mousemove", (e) => {
    mouseX = e.clientX;
    mouseY = e.clientY;
});
let previousFrameTimes = [];
let numFrameTimesToRemember = 200;
let framesWithoutAStateChange = 0;
let arrows = [];
class Arrow {
}
let logCounter = 0;
let drawMethod = [
    drawArrow000,
    drawArrow001,
    drawArrow010,
    drawArrow011,
    // drawArrow100,
    // drawArrow101,
    // drawArrow110,
    // drawArrow111,
];
function draw(currentTimeMillis) {
    if (previousFrameTimes.length >= numFrameTimesToRemember) {
        previousFrameTimes.shift();
    }
    previousFrameTimes.push(currentTimeMillis);
    let deltaTimeMillis;
    if (previousFrameTimes.length > 1) {
        deltaTimeMillis = currentTimeMillis - previousFrameTimes[previousFrameTimes.length - 2];
    }
    // simulate the arrows
    if (previousFrameTimes.length > 1) {
        for (let i = 0; i < arrows.length; i++) {
            arrows[i].x += arrows[i].velocityX * deltaTimeMillis;
            arrows[i].y += arrows[i].velocityY * deltaTimeMillis;
            if (arrows[i].x - halfArrowSize < 0) { // donk on the left
                arrows[i].x += 2 * (halfArrowSize - arrows[i].x);
                arrows[i].velocityX = -arrows[i].velocityX;
            }
            if (arrows[i].y - halfArrowSize < 0) { // donk on the top
                arrows[i].y += 2 * (halfArrowSize - arrows[i].y);
                arrows[i].velocityY = -arrows[i].velocityY;
            }
            if (arrows[i].x + halfArrowSize > canvas.width) { // donk on the right
                arrows[i].x -= 2 * (arrows[i].x + halfArrowSize - canvas.width);
                arrows[i].velocityX = -arrows[i].velocityX;
            }
            if (arrows[i].y + halfArrowSize > canvas.height) { // donk on the bottom
                arrows[i].y -= 2 * (arrows[i].y + halfArrowSize - canvas.height);
                arrows[i].velocityY = -arrows[i].velocityY;
            }
        }
    }
    if (mouseDown) {
        for (let i = 0; i < 3; i++) {
            generateArrow();
        }
    }
    // update the top UI
    arrowCounter.innerText = arrows.length.toString();
    if (previousFrameTimes.length > 1) {
        fpsCounter.innerText = Math.round(1000 / deltaTimeMillis).toString();
    }
    else {
        fpsCounter.innerText = "calculating...";
    }
    if (framesWithoutAStateChange >= numFrameTimesToRemember) {
        arrowsPerMsCounter.innerText = roundToNPlaces(arrows.length
            / (currentTimeMillis - previousFrameTimes[0])
            * numFrameTimesToRemember, 2).toString();
    }
    else {
        arrowsPerMsCounter.innerText = "calculating...";
    }
    // read the state of the right UI
    let cacheRotationYes = document.getElementById("cacheRotationYes").checked;
    let cacheResizeYes = document.getElementById("cacheResizeYes").checked;
    let integerPositionYes = document.getElementById("integerPositionYes").checked;
    let drawMethodIndex = (cacheRotationYes ? 1 : 0)
        + (cacheResizeYes ? 2 : 0)
        + (integerPositionYes ? 4 : 0);
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    // draw the arrows
    for (let i = 0; i < arrows.length; i++) {
        drawMethod[drawMethodIndex](arrows[i]);
    }
    framesWithoutAStateChange++;
    window.requestAnimationFrame(draw);
}
function generateArrow() {
    let arrow = new Arrow();
    arrow.x = clampValueToRange(mouseX, 0, canvas.width);
    arrow.y = clampValueToRange(mouseY, 0, canvas.height);
    let velocityMagnitudePixelsPerMillisecond = 0.4;
    let randomAngle = Math.random() * 2 * Math.PI;
    arrow.velocityX = Math.cos(randomAngle) * velocityMagnitudePixelsPerMillisecond;
    arrow.velocityY = Math.sin(randomAngle) * velocityMagnitudePixelsPerMillisecond;
    arrow.colorIndex = getRandomIntInclusive(0, 11);
    arrow.rotationIndex = getRandomIntInclusive(0, 3);
    arrows.push(arrow);
    framesWithoutAStateChange = -1;
}
function clampValueToRange(value, lowerBound, upperBound) {
    if (value < lowerBound) {
        return lowerBound;
    }
    if (value > upperBound) {
        return upperBound;
    }
    return value;
}
function getRandomIntInclusive(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1) + min);
}
function drawArrow000(arrow) {
    let rotation = arrow.rotationIndex * Math.PI / 2;
    ctx.translate(arrow.x, arrow.y);
    ctx.rotate(rotation);
    ctx.drawImage(arrowColors[arrow.colorIndex], -halfArrowSize, -halfArrowSize, arrowSize, arrowSize);
    ctx.rotate(-rotation);
    ctx.translate(-arrow.x, -arrow.y);
}
function drawArrow010(arrow) {
    let cachedCanvas = arrowCacheResized[0][arrow.colorIndex];
    let rotation = arrow.rotationIndex * Math.PI / 2;
    ctx.translate(arrow.x, arrow.y);
    ctx.rotate(rotation);
    ctx.drawImage(cachedCanvas, -halfArrowSize, -halfArrowSize);
    ctx.rotate(-rotation);
    ctx.translate(-arrow.x, -arrow.y);
}
function drawArrow001(arrow) {
    let cachedCanvas = arrowCacheNotResized[arrow.rotationIndex][arrow.colorIndex];
    ctx.drawImage(cachedCanvas, arrow.x - halfArrowSize, arrow.y - halfArrowSize, arrowSize, arrowSize);
}
function drawArrow011(arrow) {
    let cachedCanvas = arrowCacheResized[arrow.rotationIndex][arrow.colorIndex];
    // ctx.save();
    // ctx.translate(arrow.x, arrow.y);
    // ctx.drawImage(cachedCanvas, -halfArrowSize, -halfArrowSize);
    ctx.drawImage(cachedCanvas, arrow.x - halfArrowSize, arrow.y - halfArrowSize);
    // ctx.restore();
}
function roundToNPlaces(x, numPlaces) {
    let scale = Math.pow(10, numPlaces);
    return Math.round(x * scale) / scale;
}

exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,